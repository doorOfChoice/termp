package main

import (
	"image/png"
	"math"
	"os"

	termbox "github.com/nsf/termbox-go"
	//"image/jpeg"
)

const (
	DEFAULT = termbox.ColorDefault
	WHITE   = termbox.ColorWhite
	BLACK   = termbox.ColorBlack
	RED     = termbox.ColorRed
)

//rgb 到 xterm 的表
var table = map[uint32]int{
	135:      17,
	255:      20,
	45015:    37,
	6225920:  49,
	16766720: 215,
	11053224: 241,
	8871775:  92,
	8882015:  98,
	11513735: 141,
	14090375: 159,
	34815:    32,
	8871680:  91,
	11468975: 124,
	11524055: 149,
	8912775:  117,
	16756575: 210,
	8882095:  100,
	11534295: 155,
	11534335: 156,
	14114735: 166,
	15658734: 248,
	175:      18,
	11493295: 130,
	14135215: 178,
	5789784:  233,
	65375:    45,
	8871935:  96,
	11493215: 128,
	14114560: 163,
	14124975: 172,
	16746335: 204,
	1842204:  227,
	6291295:  80,
	5000268:  8,
	16777215: 15,
	55295:    44,
	11503575: 137,
	14145280: 181,
	1184274:  226,
	13487360: 3,
	6226055:  51,
	8881920:  97,
	8912735:  116,
	14114695: 165,
	11513600: 139,
	5131854:  232,
	11513815: 143,
	14155735: 191,
	8902535:  111,
	11534080: 151,
	16736095: 198,
	65495:    48,
	6250455:  59,
	8847615:  90,
	16736135: 199,
	16746240: 203,
	7763574:  236,
	11711154: 242,
	6270895:  70,
	16756615: 211,
	526344:   225,
	3158064:  229,
	6260655:  64,
	34560:    27,
	8847535:  88,
	14145535: 186,
	55255:    43,
	6291455:  84,
	0:        0,
	11534175: 152,
	14090415: 160,
	14090495: 162,
	6250335:  56,
	14135040: 175,
	16736000: 197,
	16746415: 206,
	3815994:  230,
	65280:    10,
	44895:    34,
	6226095:  52,
	6250415:  58,
	6260480:  61,
	8892415:  108,
	11493375: 132,
	44800:    33,
	55040:    39,
	14145495: 185,
	16766855: 217,
	16711680: 9,
	55135:    40,
	8902655:  114,
	8912815:  118,
	11524095: 150,
	16736215: 201,
	16756480: 209,
	34655:    28,
	55215:    42,
	34775:    31,
	8871855:  94,
	14155695: 190,
	11513775: 142,
	14135255: 179,
	16756735: 214,
	15066597: 7,
	44975:    36,
	6270815:  68,
	14124800: 169,
	16746375: 205,
	44935:    35,
	8847455:  86,
	8912640:  115,
	16711855: 195,
	16711895: 196,
	9079434:  238,
	24455:    23,
	45055:    38,
	11523840: 145,
	12369084: 243,
	14135175: 177,
	24320:    21,
	24575:    26,
	6270720:  67,
	6280960:  73,
	6291375:  82,
	8912895:  120,
	11503615: 138,
	13684944: 245,
	24535:    25,
	34735:    30,
	6226175:  54,
	8847360:  85,
	8847575:  89,
	11468895: 122,
	2500134:  228,
	16777055: 221,
	8882135:  101,
	4473924:  231,
	6281175:  77,
	8882055:  99,
	8892255:  104,
	11524015: 148,
	14114815: 168,
	14124935: 171,
	16756695: 213,
	8892160:  103,
	11523935: 146,
	52480:    2,
	11503535: 136,
	14155615: 188,
	16777175: 224,
	65415:    46,
	6291335:  81,
	11513695: 140,
	6250495:  60,
	11523975: 147,
	14090335: 158,
	16766935: 219,
	6447714:  234,
	52685:    6,
	16776960: 11,
	6291200:  79,
	11493255: 129,
	14145375: 182,
	13434880: 1,
	65535:    14,
	24415:    22,
	6270975:  72,
	14114775: 167,
	16746495: 208,
	10395294: 240,
	6281135:  76,
	8902495:  110,
	8902575:  112,
	14145455: 184,
	16777095: 222,
	16777135: 223,
	8902615:  113,
	11469015: 125,
	11503495: 135,
	14342874: 246,
	6260735:  66,
	6291415:  83,
	11468935: 123,
	215:      19,
	6260615:  63,
	6260695:  65,
	11513855: 144,
	11534255: 154,
	16766975: 220,
	2003199:  4,
	6281215:  78,
	8892335:  106,
	8892375:  107,
	11503455: 134,
	14090240: 157,
	16766815: 216,
	6226015:  50,
	14155520: 187,
	16736175: 200,
	13435085: 5,
	6270855:  69,
	8871815:  93,
	11493120: 127,
	13027014: 244,
	16711935: 13,
	11468800: 121,
	11534215: 153,
	14090455: 161,
	55175:    41,
	6250375:  57,
	8902400:  109,
	14135135: 176,
	16756655: 212,
	6281055:  74,
	6281095:  75,
	8871895:  95,
	8892295:  105,
	16711775: 193,
	7105644:  235,
	6260575:  62,
	6270935:  71,
	11469055: 126,
	14114655: 164,
	14155655: 189,
	16736255: 202,
	65455:    47,
	8882175:  102,
	14135295: 180,
	14145415: 183,
	16746455: 207,
	8421504:  237,
	8847495:  87,
	11503360: 133,
	14155775: 192,
	16766895: 218,
	15000804: 247,
	4620980:  12,
	24495:    24,
	34695:    29,
	6226135:  53,
	8912855:  119,
	16711815: 194,
	9737364:  239,
	6250240:  55,
	11493335: 131,
	14125015: 173,
	14125055: 174,
	95:       16,
	14124895: 170,
}

//计算rgb的组合值
func Caculate(r, g, b uint32) uint32 {
	var rgb uint32 = 0
	rgb += r << 16
	rgb += g << 8
	rgb += b

	return rgb
}

//解开rgb的组合值
func Unpack(rgb uint32) (r, g, b uint32) {
	v := rgb
	r = (v & 0xff0000) >> 16
	g = (v & 0xff00) >> 8
	b = (v & 0xff)

	return
}

//求颜色向量的相似度
func Similarity(rgb1, rgb2 uint32) float64 {
	r1, b1, g1 := Unpack(rgb1)
	r2, b2, g2 := Unpack(rgb2)
	sqrt := math.Sqrt(math.Pow(float64(r1-r2), 2) + math.Pow(float64(b1-b2), 2) + math.Pow(float64(g1-g2), 2))

	return sqrt
}

//获取和传递进来的rgba的值最相近的key
func GetKey(rgba uint32) uint32 {
	var dia float64 = 0xffffffff
	var minv uint32
	for k, _ := range table {
		if rgba == k {
			return rgba
		}

		if tdia := Similarity(rgba, k); tdia < dia {
			dia = tdia
			minv = k
		}

	}

	return minv
}

func main() {
	f, err := os.Open(os.Args[1])
	if err != nil {
		return
	}

	termbox.Init()

	defer func() {
		f.Close()
		termbox.Close()
	}()

	termbox.Clear(WHITE, BLACK)
	termbox.SetOutputMode(termbox.Output256)

	image, _ := png.Decode(f)
	//图片矩形
	rec := image.Bounds()

	//x轴偏移，y轴偏移
	shiftx, shifty := 0, 0

	for {
		termbox.Clear(WHITE, DEFAULT)
		switch ev := termbox.PollEvent(); ev.Type {
		case termbox.EventKey:
			switch ev.Key {
			case termbox.KeySpace:
				return
			case termbox.KeyArrowDown:
				shifty += 5
			case termbox.KeyArrowUp:
				shifty -= 5
			case termbox.KeyArrowLeft:
				shiftx -= 5
			case termbox.KeyArrowRight:
				shiftx += 5
			}

		}
		for i := 0; i < rec.Max.Y; i++ {
			for j := 0; j < rec.Max.X; j++ {
				r, g, b, _ := image.At(j, i).RGBA()
				r /= 0x101
				g /= 0x101
				b /= 0x101
				rgbv := Caculate(r, g, b)
				xterm := termbox.Attribute(table[GetKey(rgbv)])
				termbox.SetCell(2*j-shiftx, i-shifty, ' ', DEFAULT, xterm)
				termbox.SetCell(2*j+1-shiftx, i-shifty, ' ', DEFAULT, xterm)
			}
		}

		termbox.Flush()
	}
}
